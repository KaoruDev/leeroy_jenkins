#!/usr/bin/env ruby

require "optparse"
require_relative "../lib/leeroy_jenkins/command_line_runner"
require_relative "../lib/leeroy_jenkins/logger"
require_relative "../lib/leeroy_jenkins/version"

options = {}

parser = OptionParser.new do |opts|
  opts.banner = %{
Leeroy Jenkins!!!

Causing havoc on your well thoughtout network topology!
=================================================

Usage: leeroy [options]
  }

  opts.on(
    "-v",
    "Display the version of Leeroy Jenkins"
  ) do
    options[:display_version] = true
  end

  opts.on(
    "-t target",
    "--target=SERVER_URL",
    "URL or ip address of the box where disruptions will be created"
  ) do |target|
    options[:target] = target
  end

  opts.on(
    "--half_open",
    "Simulates half open networks"
  ) do |half_open|
    options[:half_open] = half_open
  end

  opts.on(
    "--probability=PROBABLITIY",
    "Probability of droped packets, " \
      "a random percentage between 0.75 and 0.9 will be chosen"
  ) do |probability|
    if 1 < probability.to_f
      LeeroyJenkins::Logger
        .warn("Probability may not be greater than 1, setting it to 1")
      probability = 1.0
    end

    options[:probability] = probability
  end

  opts.on(
    "--dependencies=DEPENDENCIES",
    "Coma seperate list of network dependencies"
  ) do |dependencies|
    options[:dependencies] = dependencies.split(",")
  end

  opts.on(
    "--for_reals",
    "runs the commands being printed out"
  ) do |for_reals|
    options[:for_reals] = for_reals
  end

  opts.on(
    "--duration=DURATION",
    "How long before the rules are reset"
  ) do |duration|
    options[:duration] = duration
  end
end

begin
  parser.parse!
rescue OptionParser::InvalidOption
  LeeroyJenkins::Logger.warn("Opps I'm not sure how to parse that option")
  puts parser.help
  exit(1)
end

begin
  if options[:display_version]
    LeeroyJenkins::Logger.log(LeeroyJenkins::VERSION)
  else
    LeeroyJenkins::CommandLineRunner.new(options).run
  end
rescue LeeroyJenkins::CommandLineError => e
  if e.message.empty?
    puts parser.help
  else
    LeeroyJenkins::Logger.error("#{e.message} \nSee leeroy --help for help")
  end
end
